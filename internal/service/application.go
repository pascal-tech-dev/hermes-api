package service

import (
	"context"
	"hermes-api/internal/dto"
	"hermes-api/internal/model"
	"hermes-api/internal/repository"
	"hermes-api/pkg/errorx"

	"github.com/google/uuid"
)

// ApplicationService defines the interface for application business logic
type ApplicationService interface {
	CreateApplication(ctx context.Context, userID uuid.UUID, req dto.CreateApplicationRequest) (*model.Application, error)
	GetApplicationByID(ctx context.Context, id uuid.UUID) (*model.Application, error)
	UpdateApplication(ctx context.Context, application *model.Application) error
	DeleteApplication(ctx context.Context, id uuid.UUID) error
}

// applicationService implements ApplicationService
type applicationService struct {
	applicationRepo repository.ApplicationRepository
}

// NewApplicationService creates a new application service
func NewApplicationService(applicationRepo repository.ApplicationRepository) ApplicationService {
	return &applicationService{
		applicationRepo: applicationRepo,
	}
}

// CreateApplication implements ApplicationService.
func (s *applicationService) CreateApplication(ctx context.Context, userID uuid.UUID, req dto.CreateApplicationRequest) (*model.Application, error) {
	// Validate request
	application := &model.Application{
		UserID:      userID,
		Name:        req.Name,
		Description: req.Description,
		Status:      model.ApplicationStatusActive,
		// Note: APIKey will be auto-generated by BeforeCreate hook
	}

	if err := s.applicationRepo.Create(ctx, application); err != nil {
		appErr := errorx.New(
			errorx.ErrorTypeInternal,
			errorx.ErrorCodeDatabaseError,
			"Failed to create application",
		)
		return nil, appErr
	}

	return application, nil
}

// DeleteApplication implements ApplicationService.
func (s *applicationService) DeleteApplication(ctx context.Context, id uuid.UUID) error {
	panic("unimplemented")
}

// GetApplicationByID implements ApplicationService.
func (s *applicationService) GetApplicationByID(ctx context.Context, id uuid.UUID) (*model.Application, error) {
	panic("unimplemented")
}

// UpdateApplication implements ApplicationService.
func (s *applicationService) UpdateApplication(ctx context.Context, application *model.Application) error {
	panic("unimplemented")
}
